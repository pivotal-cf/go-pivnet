// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet/v5/download"
)

type Ranger struct {
	BuildRangeStub        func(int64) ([]download.Range, error)
	buildRangeMutex       sync.RWMutex
	buildRangeArgsForCall []struct {
		arg1 int64
	}
	buildRangeReturns struct {
		result1 []download.Range
		result2 error
	}
	buildRangeReturnsOnCall map[int]struct {
		result1 []download.Range
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Ranger) BuildRange(arg1 int64) ([]download.Range, error) {
	fake.buildRangeMutex.Lock()
	ret, specificReturn := fake.buildRangeReturnsOnCall[len(fake.buildRangeArgsForCall)]
	fake.buildRangeArgsForCall = append(fake.buildRangeArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("BuildRange", []interface{}{arg1})
	fake.buildRangeMutex.Unlock()
	if fake.BuildRangeStub != nil {
		return fake.BuildRangeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.buildRangeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Ranger) BuildRangeCallCount() int {
	fake.buildRangeMutex.RLock()
	defer fake.buildRangeMutex.RUnlock()
	return len(fake.buildRangeArgsForCall)
}

func (fake *Ranger) BuildRangeCalls(stub func(int64) ([]download.Range, error)) {
	fake.buildRangeMutex.Lock()
	defer fake.buildRangeMutex.Unlock()
	fake.BuildRangeStub = stub
}

func (fake *Ranger) BuildRangeArgsForCall(i int) int64 {
	fake.buildRangeMutex.RLock()
	defer fake.buildRangeMutex.RUnlock()
	argsForCall := fake.buildRangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Ranger) BuildRangeReturns(result1 []download.Range, result2 error) {
	fake.buildRangeMutex.Lock()
	defer fake.buildRangeMutex.Unlock()
	fake.BuildRangeStub = nil
	fake.buildRangeReturns = struct {
		result1 []download.Range
		result2 error
	}{result1, result2}
}

func (fake *Ranger) BuildRangeReturnsOnCall(i int, result1 []download.Range, result2 error) {
	fake.buildRangeMutex.Lock()
	defer fake.buildRangeMutex.Unlock()
	fake.BuildRangeStub = nil
	if fake.buildRangeReturnsOnCall == nil {
		fake.buildRangeReturnsOnCall = make(map[int]struct {
			result1 []download.Range
			result2 error
		})
	}
	fake.buildRangeReturnsOnCall[i] = struct {
		result1 []download.Range
		result2 error
	}{result1, result2}
}

func (fake *Ranger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildRangeMutex.RLock()
	defer fake.buildRangeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Ranger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
