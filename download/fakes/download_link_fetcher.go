// This file was generated by counterfeiter
package fakes

import "sync"

type DownloadLinkFetcher struct {
	NewDownloadLinkStub        func() (string, error)
	newDownloadLinkMutex       sync.RWMutex
	newDownloadLinkArgsForCall []struct{}
	newDownloadLinkReturns     struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DownloadLinkFetcher) NewDownloadLink() (string, error) {
	fake.newDownloadLinkMutex.Lock()
	fake.newDownloadLinkArgsForCall = append(fake.newDownloadLinkArgsForCall, struct{}{})
	fake.recordInvocation("NewDownloadLink", []interface{}{})
	fake.newDownloadLinkMutex.Unlock()
	if fake.NewDownloadLinkStub != nil {
		return fake.NewDownloadLinkStub()
	}
	return fake.newDownloadLinkReturns.result1, fake.newDownloadLinkReturns.result2
}

func (fake *DownloadLinkFetcher) NewDownloadLinkCallCount() int {
	fake.newDownloadLinkMutex.RLock()
	defer fake.newDownloadLinkMutex.RUnlock()
	return len(fake.newDownloadLinkArgsForCall)
}

func (fake *DownloadLinkFetcher) NewDownloadLinkReturns(result1 string, result2 error) {
	fake.NewDownloadLinkStub = nil
	fake.newDownloadLinkReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DownloadLinkFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newDownloadLinkMutex.RLock()
	defer fake.newDownloadLinkMutex.RUnlock()
	return fake.invocations
}

func (fake *DownloadLinkFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
